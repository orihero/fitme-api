"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = require("express");
var controllers_1 = require("../controllers");
var validate_1 = require("./../middlewares/validate");
var user_1 = require("./../validation/schemas/user");
var router = (0, express_1.Router)();
var controller = new controllers_1.UserController();
router.get("/me", controller.me);
router.get("/", controller.find);
router.post("/", (0, validate_1.validate)(user_1.createUserValidationSchema), controller.create);
router.get("/:id", validate_1.validateIdParam, controller.findOne);
router.put("/update-name/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.updateUserNameValidationSchema), controller.updateName);
router.put("/update-phoneNumber/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.updateUserPhoneNumberValidationSchema), controller.updateNumber);
router.put("/update-proAccount/:id", validate_1.validateIdParam, controller.updateProAccount);
router.put("/add-workout-plan/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.changeWorkoutPlansValidationSchema), controller.addWorkoutPlan);
router.patch("/remove-workout-plan/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.changeWorkoutPlansValidationSchema), controller.removeWorkoutPlan);
router.put("/add-favorite-exercise/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.changeFavoriteExercisesValidationSchema), controller.addFavoriteExercise);
router.patch("/remove-favorite-exercise/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.changeFavoriteExercisesValidationSchema), controller.removeFavoriteExercise);
router.put("/add-product/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.changeProductsValidationSchema), controller.addProduct);
router.patch("/remove-product/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.changeProductsValidationSchema), controller.removeProduct);
router.put("/add-measurement-row/:id", validate_1.validateIdParam, controller.addMeasurementRow);
router.patch("/remove-measurement-row/:id", validate_1.validateIdParam, controller.removeMeasurementRow);
router.put("/add-measurement-key/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.addMeasurementKeyValidationSchema), controller.addMeasurementKey);
router.patch("/remove-measurement-key/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.removeMeasurementKeyValidationSchema), controller.removeMeasurementKey);
router.put("/set-measurement-value/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.setMeasurementValueValidationSchema), controller.setMeasurementValue);
router.put("/set-measurement-date/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.setMeasurementDateValidationSchema), controller.setMeasurementDate);
router.put("/set-schema-nutrition/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.setSchemaNutritionValidationSchema), controller.setSchemaNutrition);
router.put("/set-schedule-workout/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.setScheduleWorkoutValidationSchema), controller.setScheduleWorkout);
router.put("/set-workout-result/:id", validate_1.validateIdParam, (0, validate_1.validate)(user_1.setWorkoutResultValidationSchema), controller.setWorkoutResult);
router.put("/finish-schedule-workout/:id", validate_1.validateIdParam, controller.finishScheduleWorkout);
router.delete("/:id", validate_1.validateIdParam, controller.delete);
exports.default = router;
//# sourceMappingURL=users.js.map